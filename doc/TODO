"TODO" for 3.2
==============

- Further refine "playlist update" system.  Currently when a playlist is added
  or moved, we do a complete rebuild of every playlist treeview.  The
  playlist_update_range() function should be changed so it can be called for a
  specific playlist.  Then GTKUI can use unique playlist IDs along with
  playlist_update_range() to figure out which treeviews need to be added, moved,
  or updated.  (DONE)

- Thinking along the same lines, we currently save every playlist whenever even
  one playlist is modified.  This needs to change.  I think we should save
  playlists by unique ID (for example, "1001.xspf") so that we don't have to
  rewrite everything if playlist_reorder() gets called.  The order in which the
  playlists should be loaded on startup can be saved in the playlist-state file.
  Playlists saved according to the old scheme will need to be automatically and
  reliably migrated to the new scheme.  Also, it is critical that playlists are
  not "lost" in the event that the playlist-state file gets deleted/corrupted.

- The above optimizations should make it possible to work with larger playlists
  with less of a performance drop.  It will then be feasible to write a plugin
  that imports one's entire music collection into a "Library" playlist and
  allows one to search and create smaller playlists.  I would like to see it
  possible to do the following:
    a. Click on a "Search" button in GTKUI to enable a "Search" plugin, which
       should automatically be docked to the left with the keyboard focus in a
       "Search" field.
    b. Begin typing (for example) "john".  Searching should begin automatically
       after a slight pause in my keystrokes.  The search should be done as
       quickly as possible, but if it does take some time, it should not freeze
       the interface either.
    c. See three lists: artists matching "john", albums matching "john", and
       song titles matching "john".
    d. Double-click on "Johnny Cash" under artists.  A new playlist should be
       created with all my Johnny Cash songs, and playback should begin
       automatically in that playlist; drct_pl_open_temp_list() should do the
       trick.

Long-term "TODO"
================

- output plugins should have some kind of (optional) "query available formats"
  function, so that the core could determine what should be used. perhaps
  offer users this info?

- maybe all audio plugins (input, output, effect) could be made completely
  re-entrant. this probably means severely breaking the API. not very
  trivial either .. some plugins are probably impossible.
  * basically plugin init() should allocate / init a state struct to
    be used in all operations, etc.
  * context support should be added to plugin functions.
  * question: issues with plugins that use non-re-entrant library backends
    etc?

- URIs with "?" are stripped (the subtune support uses that), which is bad,
  because some (a lot) of real-world URLs use 'GET' arguments. this breaks
  probing, but current input probing is confusing (and possibly broken anyway)
  and should be refactored.
  * As of 2.5, is this still a problem?

- mime-types support:
  * there is already code for mime support, but I think it may not be
    sufficient as it is designed for input plugins only --
    also playlist containers etc. need this (IMHO)

- document the different APIs via Doxygen

- plugin rewrites:
  * modplug (in progress by ccr)
